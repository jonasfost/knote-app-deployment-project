name: Deploy Knote app to EKS
env:
  DOCKER_USER: ${{ secrets.DOCKER_HUB_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_HUB_TOKEN }}
  AWS_ACCESS_KEY_ID : ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  DOCKER_REPOSITORY: image-app
  NODE_IMAGE_TAG: knote-app-v1.0.0

on:
  push:
    branches: [main]

permissions:
  # id-token: write
  # contents: read
  actions: read
  security-events: write

jobs:
  Kubernete-deployment-on-EKS-cluster:
    name: knote app deployment on EKS cluster
    runs-on: ubuntu-latest
    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install kubectl on the docker
    - name: Install kubectl on the container
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest' # default is latest stable
      id: install

    # Configure AWS Credentials for docker access
		# - name: Configure AWS Credentials
		#   uses: aws-actions/configure-aws-credentials@v1
		#   with:
    #     aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    # - name: Configure AWS Credentials
    #   uses: aws-actions/configure-aws-credentials@v4
    #   with:
    #     managed-session-policies: arn:aws:iam::aws:policy/AdministratorAccess
    #     aws-region: us-east-2

    # Login to DockerHub and pull the knote image
		# - name: Login to Docker Hub and pull the knote image
		#   uses: docker/login-action@v2
		#   with:
    #     username: ${{ env.DOCKER_USER }}
    #     password: ${{ env.DOCKER_PASSWORD }}
    #   run: |
    #     docker pull ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}

    - name: Login to Docker Hub and pull the knote image
      run: |
        docker login -u ${{env.DOCKER_USER}} -p ${{env.DOCKER_PASSWORD}}
        docker pull ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}

    # K8s set context action
    - name: Set K8s context
      uses: ossrs/k8s-set-context-action@v1
      with:
        kubeconfig: '${{ env.KUBECONFIG }}'

    # Kubernetes config update to allow kubectl to work within the context
		# - name: Update kube config to allow kubectl to work within the context
    #   run: |
    #     aws eks update-kubeconfig --region us-east-2 --name knote-eks

    - name: Update kube config to allow kubectl to work within the context
      run: |
        aws eks update-kubeconfig --region us-east-2 --name knote-eks

    # Verify the cluster info
    - name: Get the information about the cluster
      run: |
        kubectl cluster-info
    
    # Verify all the worker nodes are up
    - name: Verify all the cluster nodes
      run: |
        kubectl get nodes
    
    # Deploy the app to EKS
		# - name: Deploy knote application to EKS
    #   run: |
			  # kubectl apply -f ./kube
    #     kubectl apply -f ingress.yml

    - name: Deploy knote application to EKS
      run: |
        kubectl apply -f knote.yml
        kubectl apply -f minio.yml
        kubectl apply -f mongo.yml

		# Verify the deployment
		- name: Verify deployment
		  shell: bash
      run: |
        kubectl get pods

