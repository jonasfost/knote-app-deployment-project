vdname: Build and Deploy to Docker Hub
env:
  DOCKER_USER: ${{secrets.DOCKER_HUB_USER}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_HUB_TOKEN}}
  AWS_ACCESS_KEY_ID : ${{secrets.AWS_ACCESS_KEY_ID}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
  AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
  DOCKER_REPOSITORY: image-app
  NODE_IMAGE_TAG: knote-app-v1.0.0

on:
  push:
    branches: [main]
  pull-request:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  Kubernete-deployment-on-EKS-cluster:
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: knote application deployment on EKS cluster
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Insall AWS CLI on the container
    - name: Insall AWS CLI on the container
      id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1

    # Verify AWS CLI is installed
    - name: Verify AWS CLI is installed
      run: aws --version
      shell: bash

    # Configure AWS Credentials for docker access
		# - name: Configure AWS Credentials
		#   uses: aws-actions/configure-aws-credentials@v4
		#   with:
    #     aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        managed-session-policies: arn:aws:iam::aws:policy/AdministratorAccess
        aws-region: us-east-2

    # Install kubectl on the docker
    - uses: azure/setup-kubectl@v2.0
      with:
        version: 'latest' # 'v1.24.0' # default is latest stable
      id: install

    # Kubernetes config update to allow kubectl to work within the context
		- name: Update kube config to allow kubectl to work within the context
		  shell: bash
      # run: aws eks update-kubeconfig --region ${{ env.AWS_DEFAULT_REGION }}  --name ${{ env.EKS_CLUSTER }}
      # run: aws eks update-kubeconfig --region $(terraform output -raw region) --name $(terraform output -raw cluster_name)
      run: aws eks update-kubeconfig --region us-east-2 --name knote-eks

    # Verify the ckuster info
    - name: Get the information about the cluster Verify the cluster Info
      shell: bash
      run: |
        kubectl cluster-info
    
    # Verify all the worker nodes are up
    - name: Verify all the cluster nodes
      shell: bash
      run: |
        kubectl get nodes

    # Login to DockerHub and pull the knote image
		- name: Login to Docker Hub and pull the knote image
		  uses: docker/login-action@v2
		  with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ env.DOCKER_PASSWORD }}
      run: |
        docker pull ${{env.DOCKER_USER}}/${{env.DOCKER_REPOSITORY}}:${{env.NODE_IMAGE_TAG}}
    
    # Deploy the app to EKS
		- name: Deploy knote application to EKS
		  shell: bash
      run: |
			  kubectl apply -f kube
        kubectl apply -f ingress.yml
			
		# Verify the deployment
		- name: Verify deployment
		  shell: bash
      run: |
        kubectl get pods

